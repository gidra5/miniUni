{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "miniUni",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#operators" },
    { "name": "punctuation.separator.comma.miniuni", "match": "," },
    { "name": "punctuation.terminator.statement.miniuni", "match": ";" },
    { "name": "punctuation.accessor.miniuni", "match": "\\." },
    {
      "name": "keyword.control.miniuni",
      "match": "\\b(if|while|for|loop|else|do|import|export|as|in|is|fn|inject|without|mask|await|async)\\b"
    },
    { "match": "\\b(true|false)\\b", "name": "constant.language.miniuni" },
    {
      "match": "\\b(self|try|throw|break|continue|return|channel|close)\\b",
      "name": "constant.language.miniuni"
    },
    { "name": "constant.other.symbol.miniuni", "match": "\\:\\w+" },
    { "match": "\\b(like|mut|strict)\\b", "name": "storage.modifier.miniuni" },
    {
      "match": "(\\w+)\\(",
      "captures": {
        "1": { "name": "entity.name.function.miniuni" }
      }
    }
  ],
  "repository": {
    "line_continuation_character": {
      "patterns": [
        {
          "match": "(\\\\)\\s*\\n",
          "captures": {
            "1": {
              "name": "constant.character.escape.line-continuation.miniuni"
            }
          }
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.block.miniuni"
            }
          },
          "match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
          "name": "comment.block.miniuni"
        },
        {
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.miniuni"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.miniuni"
            }
          },
          "name": "comment.block.c"
        },
        {
          "match": "\\*/.*\\n",
          "name": "invalid.illegal.stray-comment-end.miniuni"
        },
        {
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.line.c"
            }
          },
          "match": "^// =(\\s*.*?)\\s*=\\s*$\\n?",
          "name": "comment.line.banner.miniuni"
        },
        {
          "begin": "(^[ \\t]+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.miniuni"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "//",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.miniuni"
                }
              },
              "end": "\\n",
              "name": "comment.line.double-slash.miniuni",
              "patterns": [
                {
                  "include": "#line_continuation_character"
                }
              ]
            }
          ]
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.miniuni",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.miniuni",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "match": "\\b0b[01]*\\b",
          "name": "constant.numeric.binary.miniuni"
        },
        {
          "match": "\\b0x[0-9a-fA-F]*\\b",
          "name": "constant.numeric.hex.miniuni"
        },
        {
          "match": "\\b0o[0-7]*\\b",
          "name": "constant.numeric.octal.miniuni"
        },
        {
          "match": "\\b([0-9]+\\.?[0-9]*)|(\\.[0-9]+)\\b",
          "name": "constant.numeric.miniuni"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.spread.miniuni",
          "match": "\\.\\.\\."
        },
        {
          "match": "\\b--\\b",
          "name": "keyword.operator.decrement.miniuni"
        },
        {
          "match": "\\b\\+\\+\\b",
          "name": "keyword.operator.increment.miniuni"
        },
        {
          "match": "\\b\\+=\\b",
          "name": "keyword.operator.assignment.compound.miniuni"
        },
        {
          "match": "!=|<=|>=|==|<|>|===|!==",
          "name": "keyword.operator.comparison.miniuni"
        },
        {
          "match": "!|\\b(not|and|or)\\b",
          "name": "keyword.operator.logical.miniuni"
        },
        {
          "match": "=|\\:=",
          "name": "keyword.operator.assignment.miniuni"
        },
        {
          "match": "%|\\*|/|-|\\+",
          "name": "keyword.operator.miniuni"
        }
      ]
    }
  },
  "scopeName": "source.miniuni"
}
